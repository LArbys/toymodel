import numpy aAs np
import tensorflow.python.platform
import tensorflow as tf
import toy_layers as L

def build(input_tensor, num_class=4):

    net = input_tensor
    # 1st conv layer
    net = L.conv2d(input_tensor=net, name='conv1_1', kernel=(3,3), stride=(1,1), num_filter=128, activation_fn=tf.nn.relu)
    # max pool
    net = L.max_pool (input_tensor=net, name="pool1",   kernel=(2,2), stride=(2,2))
    # 2nd conv layer
    net = L.conv2d(input_tensor=net, name='conv2_1', kernel=(3,3), stride=(1,1), num_filter=128, activation_fn=tf.nn.relu)
    # max pool
    net = L.max_pool (input_tensor=net, name="pool2",   kernel=(2,2), stride=(2,2))
    
    vals = []
    i = 0
    while i <= num_class:
        z = L.final_inner_product(input_tensor=net, name='fc_final', num_output=num_class)
        vals.append(z)
        i += 1

    return vals
    print valsTraceback (most recent call last):
  File "toynet/toy_lenet.py", line 30, in <module>
    net = build(x)
  File "toynet/toy_lenet.py", line 21, in build
    z = L.final_inner_product(input_tensor=net, name='fc_final', num_output=num_class)
  File "/home/amherman/toymodel/toynet/toy_layers.py", line 53, in final_inner_product
    initializer=xavier_initializer())
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/variable_scope.py", line 988, in get_variable
    custom_getter=custom_getter)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/variable_scope.py", line 890, in get_variable
    custom_getter=custom_getter)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/variable_scope.py", line 348, in get_variable
    validate_shape=validate_shape)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/variable_scope.py", line 333, in _true_getter
    caching_device=caching_device, validate_shape=validate_shape)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/variable_scope.py", line 639, in _get_single_variable
    name, "".join(traceback.format_list(tb))))
ValueError: Variable fc_final/fc_final_weights already exists, disallowed. Did you mean to set reuse=True in VarScope? Originally defined at:

  File "/home/amherman/toymodel/toynet/toy_layers.py", line 53, in final_inner_product
    initializer=xavier_initializer())
  File "toynet/toy_lenet.py", line 21, in build
    z = L.final_inner_product(input_tensor=net, name='fc_final', num_output=num_class)
  File "toynet/toy_lenet.py", line 30, in <module>
    net = build(x)

# script unit test
if __name__ == '__main__':
    x = tf.placeholder(tf.float32, [50,28,28,1])
    net = build(x)
